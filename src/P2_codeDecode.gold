// -----------------------
// Author 1: Veronica Escobar A
// Codigo 1: 201922197
// Author 2 : Juan Miguel Vega C
// Codigo 2: 
//
// P2 - LyM Seccion 2 2021-1
//------------------------------
// 
// Task Statement: The purpose of this project is to use GOLD to define a finite state transducer to code and decode inputs. 
// 
// This program is able to both code and decode a given string that contains letters from the english alphabet (lowercase) acording to a set of given rules.
// To do both the coding and decoding a Mealy automata is used as it makes the coding and decoding proces easier, at least programaticaly in gold.
//
// In the docs there is more information about the automatas used and their design (nice little picture)
// Also in the docs there is also a file containing a variety of tests done to the automata to check its coding and decoding as excpected. 
// But if you use option 3 in the console programme you will be ablte to quickly test strings to see how they are coded and decoded (the tests and this show the same info)
//
// This is a console program so when runing this file with (Run gold program (without arguments) please check the console. 
// If you want to see the automatas you can buy uncomenting lines 46 and 47 . Either way a prettier version of them is shown in the docs.
//
//-----------------------
using gold.**
         
//Declared outside in order that decoder and coder can read them  
var Alphabet
var alph_str:String
var alph:char[]
var lastPos : int 

/**
 * Main procedure of the automata
 */
procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
	
    alph_str = "abcdefghijklmnopqrstuvwxyz"
    alph = alph_str.toCharArray()
    lastPos = alph.length -1
    
    //Declare both input and output alphabet of coder and decoder
    Alphabet = ('a'‥'z')
    
    //Declare coder and decoder
    coder:=createCoder()
   	deCoder:=createDecoder()
   	
   	//UNCOMMENT TO VISUALIZE AUTOMATAS
   	//GAutomataFrame.show(coder)
   	//GAutomataFrame.show(deCoder)
   	
   	//Console (through this you can interact with coder and decoder)
   	consoleCodeDecode(coder,deCoder)
end


/**
 * This defines the consolCodeDecoder. here the console program is presented and the automaton can be accesed by a user, 
 * this whom can insert a string of their liking and see how it would code and decode.
 */
procedure consoleCodeDecode(C:ITransducer, D:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
	currentInput: String = " "
	
	print "------------------------------------------------------------- "
	print "Welcome to Proyect 2: Coder-Decoder! \n"
		
	while currentInput != λ do
			
		print "------------------------------------------------------------- "
		print "Enter the string you want to use (empty stringto exit):"
		
		if currentInput != λ then
			
			currentInput := sc.nextLine()	
			//currentInput := sc.nextLine()	.toLowerCase()
			
			if currentInput != λ then
				valid := false
				option:String = λ
				
				
              while !valid do
	               print ""			       
	              	print "What do you want to do with this string?"
			       	print "1. code"
			       	print "2. decode"
			       	print "3. code and decode"
		      		
		      		
		       		option := sc.nextLine()
		       		
		       		
		       		if option ∈ {"1","2","3"} then
		       			valid := true
		       		else
		       			print("You didnt select a valid Option, try again. \n")
		       		end
		       
		       end
		       
		       
		       
		       codedString:String = ""
		       deCodedString:String = ""
		       var isAccepted: boolean //Will always be true
		       
		       codedStrScript: String = "The Coded string was: "
		       deCodedStrScript: String = "The DeCoded string was: "
		       
		       //OPTION 1: CODE
		       if option.equals("1") then
		       		isAccepted = C.acceptsString(currentInput) 
		       		codedString = C.getOutputString()
		       		print codedStrScript.concat(codedString)
		       		
		       	//OPTION 2: DECODE
		       else if option.equals("2") then
		       		isAccepted = D.acceptsString(currentInput) 
		       		deCodedString= D.getOutputString()
		       		print deCodedStrScript.concat(deCodedString)
		       		
		       	//OPTION 3: CODE AND DECODE
		       	else
		       		
		       		isAccepted = C.acceptsString(currentInput) 
		       		codedString = C.getOutputString()
		    		print codedStrScript.concat(codedString)
		    		
		       		isAccepted = D.acceptsString(codedString) 
		       		deCodedString= D.getOutputString()
		       		print deCodedStrScript.concat(deCodedString)
		       		
		       		isEqual: String = "The input string is " + (currentInput.equals(deCodedString)? "" : "not ") +  "equal to the decoded string"
		       		print "\n" + isEqual
		       		
		       end	
			end
		end
	end
end
end


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------                        C    O    D   E   R                                             ---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Creates the coder. Works based modulo 5 on the length of a string,
 * The specific rules are declared in the task(enunciado)
 * Mealy automata.
 */
function createCoder():ITransducer begin
	
	//q4_letter. This is how we maintain "memory" of the letter previously read, through the state it self and its name
	q4_estados := {"q4_a", "q4_b", "q4_c" , "q4_d", "q4_e", "q4_f", "q4_g", "q4_h", "q4_i", "q4_j", "q4_k", "q4_l", "q4_m", "q4_n", "q4_o", "q4_p", "q4_q", "q4_r", "q4_s", "q4_t", "q4_u", "q4_v", "q4_w", "q4_x", "q4_y", "q4_z"}
	
	//Declaration of automata
	Q := {"q0", "q1", "q2", "q3"} ∪ q4_estados 
	Σ := Alphabet
	Γ := Alphabet
	q := "q0"
	F := Q
	
	//Creates Mealy  automata to decode
	return 	GDeterministicTransducer(Q,Σ,Γ,q,F,δCode,g,hCode)
end

/**
 * Transition function for the coder of the string.
 * It defines the basic  transitions between the 5 states that make the coder Mealy automata
 * Each state represents a modulo of 5 on the curreng length of the string (where q(num) then num % 5 letters have been read up until thean)
 * Each transition carries its own rules on how the output is formated, but those are specified in another function
 */
function δCode(q: String,s) begin
	
	 //Case (q % 5 == 1) &&  Rule(Coded with the next letter in the alphabet)
	 if q == "q0" then
	 	return "q1"
	 	
	 // Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	 elseif q == "q1" then
	 	return "q2"
	 	
	// Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	  elseif q == "q2" then
	 	return "q3"
	 
	 //Case(q % 5 == 4) &&  Rule( Not coded, outputs same letter as input)
	 elseif q == "q3" then
	 	q4_nextLetterState : String = "q4_" + s // based on the input letter in s then it should transition to state q4_s. This is how the automaton "remembers" the previous character
		return q4_nextLetterState 
	 	
	 // Case ( q % 5 == 0) && Rule(Replaced by the letter that was read and the previous letter (Slight adjustment to automata plan, first print input symbol and then the previous one)
	 elseif q.startsWith("q4_") then
	 	return "q0"
	 end
end

/**
 * The output function of the mealy machine used for the decoder works based on the rules given in the enunciado.
 * Based on the position in the string, multiples of 5 (mod 5), diferent rules are to be used to calculate the output string
 */
function hCode(q: String,s) begin
	
	currCharAsString:String = Character.toString(s)//Current symbol being handled
	duplicateChar : String = currCharAsString.concat(Character.toString(s)) //Get duplication of the current symbol
	prevChar: char = getPrevChar(s) //Previous char in alphabet
	nextChar: char = getNextChar(s) //Next char in alphabet
	
	//Case (q % 5 == 1) &&  Rule(Coded with the next letter in the alphabet)
	 if (q == "q0") then
	 	return nextChar
	 
	 // Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	 elseif ( q == "q1") then
	 	return duplicateChar
	 	
	 // Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	 elseif ( q == "q2") then
	 	return prevChar
	 
	 //Case(q % 5 == 4) &&  Rule( Not coded, outputs same letter as input)
	 elseif (q == "q3") then
	 	return s
	 
	 // Case ( q % 5 == 0) && Rule(Replaced by the letter that was read and the previous letter (Slight adjustment to automata plan, first print input symbol and then the previous one)
	 elseif ( q.startsWith("q4_")) then
		//Does loop arround the whole alphabet to check which state its in and returns the corresponding letter (the state contains informatin about the previous letter)
		for each letter in Alphabet do
			if( q.endsWith(letter)) then
				return currCharAsString.concat(Character.toString(letter))  //Concatenates current letter being passed , s, and the letter that was reviously passed , letter
			end
		end
		
	 //Error case
	 else
	 	return λ
	 end
end


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------                      D    E    C    O    D   E   R                                    ---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Creates a decoder that well‥‥ decodes‥ the strings coded using the rules given.
 * This decoder works modulo 7, as any 5 letter string will be coded into a 7 letter string.
 *  Therefore to uno it one has to work based modulo 7
 */
function createDecoder():ITransducer begin
	//Declaration of automata
	Q := {"d0", "d1", "d2", "d3","d4", "d5", "d6"} 
	Σ := Alphabet
	Γ := Alphabet
	q := "d0"
	F := Q

	return GDeterministicTransducer(Q,Σ,Γ,q,F,δDecode,g,hDecode)
end


/**
 * Transition function for the decoder
*  The states circle arround each other. from d0->d1->d2->d3->d4->d5->d6->d1->‥‥.
 */
function δDecode(q:String,s) begin
	stateId: String = "d" 
	
	//If in any state d(n) where 0< n < 6 then advance to next state d(n+1)
	if((!q.endsWith(6) and !q.endsWith("r"))) then
		nextStateNumber: int = Integer.parseInt(q[1]) + 1
		return stateId.concat(Integer.toString(nextStateNumber))
		
	//If in d6 it circles back to d1
	elseif(q.endsWith(6)) then 
		return stateId.concat("0")
	end
end

/**
 * Decode output function
 * The excact rules used to decode can be seen in the documentation, it mostly consists in undoing the changes and char aditons on the base string
 * More info in the docs.
 */
function hDecode(q,s) begin
	
	prevChar: char = getPrevChar(s) //Previous char in alphabet
	nextChar: char = getNextChar(s) //Next char in alphabet
	
	//Output function
	if q == "d0" then
	 	return prevChar
	elseif (q == "d1" or  q == "d4" or q == "d5") then
	 	return s 
	elseif q == "d3" then
	 	return nextChar
	else
	  	return λ
	 end
end
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------                     A U X I L I A R Y   F U N C T I O N S                  ---------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
/**
 * When given a character in the alphabet it gets the previous character in the alphabet. 
 * It treats the alphabet circularly, as in the previous character of a will be z
 */
function getPrevChar(currentChar:char) begin
	index: int = alph_str.indexOf(currentChar)
	return (index == 0) ? alph[lastPos] :alph[index - 1]
end

/**
 * When given a character in the alphabet it gets the next character in the alphabet
 *  It treats the alphabet circularly, as in the next character of z will be a
 */
function getNextChar(currentChar:char) begin
	index: int = alph_str.indexOf(currentChar)
	return (index == lastPos) ? alph[0] : alph[index + 1]
end

/**
 * Generalized Moore automata output function 
 * It doesnt do anything, we are using a mealy automata
 */
function g(q) begin
	return λ 
end