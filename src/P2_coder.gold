// -----------------------
// Author 1: Veronica Escobar A
// Codigo 1: 201922197
// Author 2 : Juan Miguel Vega C
// Codigo 2: 
//
// P2 - LyM Seccion 2 2021-1
//------------------------------
// 
// Task Statement: The purpose of this project is to use GOLD to define a finite state transducer to code and decode inputs. 
// 
// In this program we present a Mealy Automata that is able to code the input
//-----------------------

using gold.structures.automaton.*
using gold.visualization.automaton.*

var alph_str:String
var alph:char[]
var lastPos : int 

procedure main(args:String[]) begin
	alph_str = "abcdefghijklmnopqrstuvwxyz"
    alph = alph_str.toCharArray()
    lastPos = alph.length -1
    
	//q4_estados: They allow me to " remember" which one was the previous string
	q4_estados := {"q4_a", "q4_b", "q4_c" , "q4_d", "q4_e", "q4_f", "q4_g", "q4_h", "q4_i", "q4_j", "q4_k", "q4_l", "q4_m", "q4_n", "q4_o", "q4_p", "q4_q", "q4_r", "q4_s", "q4_t", "q4_u", "q4_v", "q4_w", "q4_x", "q4_y", "q4_z"}
	
	//Declaration of automata
	Q := {"q0", "q1", "q2", "q3"} ∪ q4_estados 
	Σ := ('a'‥'z')
	Γ := ('a'‥'z')
	q := "q0"
	F := Q
	
	//Definition of (Mealy || Moore) automata
	M := GDeterministicTransducer(Q,Σ,Γ,q,F,δ,g,h)
	
	//Show visual graph of automata
	GAutomataFrame.show(M)
	
end


/**
 * Transition function
 */
 function δ(q: String,s) begin
	
	//Case (q % 5 == 1) &&  Rule(Coded with the next letter in the alphabet)
	 if q == "q0" then
	 	return "q1"
	 	
	// Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	elseif q == "q1" then
	 	return "q2"
	
	// Case (q % 5 == 3) &&  Rule( Coded with previous letter in the alphabet)
	elseif q == "q2" then
	 	return "q3"
	
	//Case(q % 5 == 4) &&  Rule( Not coded, outputs same letter as input)
	elseif q == "q3" then
	 	q4_nextLetterState : String = "q4_" + s // based on the input letter in s then it should transition to state q4_s
	 	return q4_nextLetterState 
	
	// Case ( q % 5 == 0) && Rule(Replaced by the letter that was read and the previous letter (Slight adjustment to automata plan, first print input symbol and then the previous one)
	elseif q.startsWith("q4_") then
	 	return "q0"
	 	
	 end

end

/**
 * Mealy Automata Output function
 */
function h(q: String,s) begin
	
	//Current symbol being handled (Also helps in case rule 4 is fullfiled)
	currChar:char = s
	currCharAsString:String = Character.toString(s)
	
	//Get duplication of the current symbol in the case Rule 2 is fullfiled
	duplicateChar : String = currCharAsString.concat(currCharAsString)
	
	//Get the previous and next symbol of the sequence
	nextChar: char = getNextChar(currChar)
	prevChar: char = getPrevChar(currChar)
	
	 //Case (q % 5 == 1) &&  Rule(Coded with the next letter in the alphabet)
	 if (q == "q0") then
	 	return nextChar
	 
	// Case (q % 5 == 2) &&  Rule( Duplicates input letter)
	 elseif ( q == "q1" ) then
	 	return duplicateChar

	// Case (q % 5 == 3) &&  Rule( Coded with previous letter in the alphabet)
	elseif ( q == "q2" ) then
	 	return prevChar
	 
	//Case(q % 5 == 4) &&  Rule( Not coded, outputs same letter as input)
	elseif (q == "q3" ) then
	 	return s
	 
	// Case ( q % 5 == 0) && Rule(Replaced by the letter that was read and the previous letter (Slight adjustment to automata plan, first print input symbol and then the previous one)
	elseif ( q.startsWith("q4_") ) then
		for each letter in ('a'‥'z') do
			if( q.endsWith(letter)) then
				return currCharAsString.concat(Character.toString(letter))  //Concatenates current letter being passed , s, and the letter that was reviously passed , letter
			end
		end
		
		
	 else
	 	return λ
	 	
	 end
	
end


function g(q) begin
	return λ //For P2 We wont be using a Moore Automata.
end


function getPrevChar(currentChar:char) begin
	return (alph_str.indexOf(currentChar) == 0) ? alph[lastPos] :alph[alph_str.indexOf(currentChar) - 1]
end

function getNextChar(currentChar:char) begin
	return (alph_str.indexOf(currentChar) == lastPos) ? alph[0] : alph[alph_str.indexOf(currentChar) + 1]
end