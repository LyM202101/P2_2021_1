// -----------------------
// Author 1: Veronica Escobar A
// Codigo 1: 201922197
// Author 2 : Juan Miguel Vega C
// Codigo 2: 
//
// P2 - LyM Seccion 2 2021-1
//------------------------------
// 
// Task Statement: The purpose of this project is to use GOLD to define a finite state transducer to code and decode inputs. 
// 
// In this program we present a Mealy Automata that is able to decode the input
//-----------------------

using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
	
	//Declaration of automata
	Q := {"d0", "d1", "d2", "d3","d4", "d5", "d6", "err"} 
	Σ := ('a'‥'z')
	Γ := ('a'‥'z')
	q := "d0"
	F := Q
	
	//Definition of Mealy automata
	M := GDeterministicTransducer(Q,Σ,Γ,q,F,δ,g,h)
	
	//Show visual graph of automata
	GAutomataFrame.show(M)
	
end

/**
 * Transition function
 * In this case the module changes to 7. As a 5 letter string will be always converted into an output with 7 strings:
 */
function δ(q:String,s) begin
	alphabet = ('a'‥'z')
	stateId: String = "d" //This is to allow flexibility in the case they change the states
	
	//If in any state d(n) where 0< n < 6 then advance to next state d(n+1)
	if((!q.endsWith(6) and !q.endsWith("r"))  and s in alphabet ) then
		nextStateNumber: int = Integer.parseInt(q[1]) + 1
		return stateId.concat(Integer.toString(nextStateNumber))
		
	//If in d6 it circles back to d1
	elseif(q.endsWith(6) and s in alphabet) then 
		return stateId.concat("0") 
		
	//Next state is by default error state so if it doesnt go in the if or else if  then it sends the automaton to error state
	else
		return "err"
	end
end

/**
 * Mealy Automata Output function
 */
function h(q,s) begin
	return λ
end

/**
 * Moore AutomataOutput function
 */
function g(q) begin
	return λ //For P2 We wont be using a Moore Automata.
end